// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/Soreing/growler/application/controllers"
	"github.com/Soreing/growler/application/middlewares"
	"github.com/Soreing/growler/domain/usecases"
	"github.com/Soreing/growler/infra"
	"github.com/Soreing/growler/infra/clients/discord"
	"github.com/Soreing/growler/infra/cntxt"
	"github.com/Soreing/growler/infra/config"
	"github.com/Soreing/growler/infra/logger"
	"github.com/Soreing/growler/infra/memcache"
	"github.com/Soreing/growler/infra/repos"
)

// Injectors from wire.go:

// InitializeEvent creates an Event. It will error if the Event is staffed with
// a grumpy greeter.
func InitializeApp() (*app, error) {
	zapLogger := logger.NewLogger()
	configContext := config.NewConfigContext(zapLogger)
	appConfigs := config.NewAppConfigs(configContext)
	factory := cntxt.NewFactory(zapLogger)
	uidsRepository, err := repos.NewUidsRepository()
	if err != nil {
		return nil, err
	}
	options := config.NewDiscordClientOptions(configContext)
	client := discord.NewClient(options)
	cache := memcache.NewMemoryCache()
	discordRepository := repos.NewDiscordRepository(client, cache)
	useCases := usecases.NewUseCases(factory, uidsRepository, discordRepository)
	alertsController := controllers.NewAlertsController(useCases)
	panicHandlerMiddleware := middlewares.NewPanicHandlerMiddleware(zapLogger)
	errorHandlerMiddleware := middlewares.NewErrorHandlerMiddleware(zapLogger)
	addContextMiddleware := middlewares.NewAddContextMiddleware(useCases)
	infrastructure := infra.NewInfrastructure(zapLogger)
	applicationApp := NewApp(appConfigs, alertsController, panicHandlerMiddleware, errorHandlerMiddleware, addContextMiddleware, infrastructure)
	return applicationApp, nil
}
